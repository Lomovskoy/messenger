'''Первая попытка реализации GUI на питоне PyQt5'''
# -*- coding: utf-8 -*-

'''Импорт библиотек'''
import sys
'''Основные виджеты расположены в PyQt5.QtWidgets.'''
'''объект приложения (экземпляр QApplication)'''
from PyQt5.QtWidgets import QApplication
'''базовый класс для всех объектов интерфейса'''
from PyQt5.QtWidgets import QWidget
'''Иконка заголовка'''
from PyQt5.QtGui import QIcon
'''Класс QtWidgets.QDesktopWidget предоставляет информацию о компьютере пользователя, в том числе о размерах экрана.'''
from PyQt5.QtWidgets import QDesktopWidget

from PyQt5.QtWidgets import QPushButton, QLineEdit, QInputDialog, QTextEdit,QVBoxLayout

'''Класс Example наследуется от класса QWidget. Это означает, что мы вызываем два конструктора:
первый для класса Example и второй для родительского класса.
Функция super() возвращает родительский объект Example с классом, и мы вызываем его конструктор.'''
class Example(QWidget):
    
    '''Конструктор класса'''
    def __init__(self):
        super().__init__()
        '''Создание GUI делегируется методу initUI().'''
        self.initUI()
        self.text = QTextEdit(self)
        self.clr_btn = QPushButton('Clear')


    def initUI(self):

        '''Название кнопки для ввода текста'''
        self.btn = QPushButton('Отправить', self)
        '''Позиция кнопки для ввода текста'''
        self.btn.move(265, 520)
        '''действие при нажатии кнопки для ввода текста'''
        self.btn.clicked.connect(self.showDialog)

        
        '''Поля для вывода текста'''
        self.le = QLineEdit(self)
        
        '''Название Поля для вывода текста'''
        self.le.move(10, 10)
        
        '''Метод setGeometry() делает две вещи: помещает окно на экране и устанавливает его размер.
        Первые два параметра х и у - это позиция окна. Третий - ширина, и четвертый - высота окна.
        На самом деле, он сочетает в себе методы resize() и move() в одном методе.'''
        self.setGeometry(300, 300, 350, 550)
        
        '''Последний метод устанавливает заголовок приложения..'''
        self.setWindowTitle('Quick')
        
        '''Последний метод устанавливает иконку приложения. Чтобы сделать это, мы создали объект QIcon.
        QIcon получает путь к нашей иконке для отображения.'''
        self.setWindowIcon(QIcon('image/title.png'))
        
        '''Метод show() отображает виджет на экране.
        Виджет сначала создаётся в памяти, и только потом (с помощью метода show)
        показывается на экране.'''
        self.show()

        

    def showDialog(self):
        '''Пример имеет кнопку и виджет редактирования строки. Кнопка показывает диалог ввода.
        Вводимый текст может быть отображён в виджете редактирования строки.'''
        text, ok = QInputDialog.getText(self, 'Input Dialog', 'Enter your name:')
        
        '''Эта строка показывает диалог ввода. Первая строка – это заголовок диалога,
        вторая – сообщение внутри диалога. Диалог возвращает введённый текст и логическое значение.
        Если мы нажимаем кнопку «ОК», то логическое значение является правдой.'''
        if ok:
            self.le.setText(str(text))
            
if __name__ == '__main__':
    
    '''Каждое приложение PyQt5 должно создать объект приложения (экземпляр
    QApplication). Параметр sys.argv это список аргументов командной строки.
    Скрипты Python можно запускать из командной строки. Это способ,
    которым мы можем контролировать запуск наших сценариев.'''
    app = QApplication(sys.argv)
    
    '''Класс Example наследуется от класса QWidget.Виджет QWidget это базовый класс для всех объектов интерфейса
    пользователя в PyQt5. Мы предоставляем конструктор по умолчанию для QWidget.
    Конструктор по умолчанию не имеет родителя.Виджет без родителей называется окно.'''
    ex = Example()
    
    '''Наконец, мы попадаем в основной цикл приложения. Обработка событий
    начинается с этой точки. Основной цикл получает события от оконной системы
    и распределяет их по виджетам приложения. Основной цикл заканчивается,
    если мы вызываем метод exit() или главный виджет уничтожен. Метод sys.exit()
    гарантирует чистый выход. Вы будете проинформированы, как завершилось
    приложение.
    Метод exec_ () имеет подчеркивание. Это происходит потому, что exec
    является ключевым словом в python 2'''
    sys.exit(app.exec_())
